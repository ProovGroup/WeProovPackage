// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SwiftRichString
import CoreGraphics
import CoreText
import Foundation
import MobileCoreServices
import ObjectiveC
import Swift
@_exported import SwiftRichString
import UIKit
import _Concurrency
import ObjectiveC.runtime
@objc public protocol AsyncTextAttachmentDelegate {
  @objc func textAttachmentDidLoadImage(textAttachment: SwiftRichString.AsyncTextAttachment, displaySizeChanged: Swift.Bool)
}
@objc public class AsyncTextAttachment : UIKit.NSTextAttachment {
  public var imageURL: Foundation.URL?
  public var displaySize: CoreGraphics.CGSize?
  public var maximumDisplayWidth: CoreGraphics.CGFloat?
  weak public var delegate: SwiftRichString.AsyncTextAttachmentDelegate?
  public init(imageURL: Foundation.URL? = nil, delegate: SwiftRichString.AsyncTextAttachmentDelegate? = nil)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc override dynamic public func image(forBounds imageBounds: CoreGraphics.CGRect, textContainer: UIKit.NSTextContainer?, characterIndex charIndex: Swift.Int) -> UIKit.UIImage?
  @objc override dynamic public func attachmentBounds(for textContainer: UIKit.NSTextContainer?, proposedLineFragment lineFrag: CoreGraphics.CGRect, glyphPosition position: CoreGraphics.CGPoint, characterIndex charIndex: Swift.Int) -> CoreGraphics.CGRect
  @objc deinit
}
extension UIKit.NSLayoutManager {
  public func setNeedsLayout(forAttachment attachment: UIKit.NSTextAttachment)
  public func setNeedsDisplay(forAttachment attachment: UIKit.NSTextAttachment)
}
extension Foundation.NSMutableAttributedString {
  convenience public init?(imageURL: Swift.String?, bounds: Swift.String? = nil)
  convenience public init?(imageNamed: Swift.String?, bounds: Swift.String? = nil)
  convenience public init?(image: SwiftRichString.Image?, bounds: Swift.String? = nil)
}
extension Foundation.NSMutableAttributedString {
  @discardableResult
  public func add(style: Swift.String, range: Foundation.NSRange? = nil) -> SwiftRichString.AttributedString
  @discardableResult
  public func add(styles: [Swift.String], range: Foundation.NSRange? = nil) -> SwiftRichString.AttributedString
  @discardableResult
  public func set(style: Swift.String, range: Foundation.NSRange? = nil) -> SwiftRichString.AttributedString
  @discardableResult
  public func set(styles: [Swift.String], range: Foundation.NSRange? = nil) -> SwiftRichString.AttributedString
  @discardableResult
  public func add(style: SwiftRichString.StyleProtocol, range: Foundation.NSRange? = nil) -> SwiftRichString.AttributedString
  @discardableResult
  public func add(styles: [SwiftRichString.StyleProtocol], range: Foundation.NSRange? = nil) -> SwiftRichString.AttributedString
  @discardableResult
  public func set(style: SwiftRichString.StyleProtocol, range: Foundation.NSRange? = nil) -> SwiftRichString.AttributedString
  @discardableResult
  public func set(styles: [SwiftRichString.StyleProtocol], range: Foundation.NSRange? = nil) -> SwiftRichString.AttributedString
  @discardableResult
  public func removeAttributes(_ keys: [Foundation.NSAttributedString.Key], range: Foundation.NSRange) -> Self
  public func remove(_ style: SwiftRichString.StyleProtocol) -> Self
}
public func + (lhs: SwiftRichString.AttributedString, rhs: SwiftRichString.AttributedString) -> SwiftRichString.AttributedString
public func + (lhs: Swift.String, rhs: SwiftRichString.AttributedString) -> SwiftRichString.AttributedString
public func + (lhs: SwiftRichString.AttributedString, rhs: Swift.String) -> SwiftRichString.AttributedString
@_hasMissingDesignatedInitializers @_functionBuilder public class AttributedStringBuilder {
  public static func buildBlock(_ components: SwiftRichString.AttributedString...) -> SwiftRichString.AttributedString
  @objc deinit
}
extension Foundation.NSMutableAttributedString {
  public class func composing(@SwiftRichString.AttributedStringBuilder _ parts: () -> SwiftRichString.AttributedString) -> SwiftRichString.AttributedString
}
public protocol ColorConvertible {
  var color: SwiftRichString.Color { get }
}
extension UIKit.UIColor : SwiftRichString.ColorConvertible {
  public var color: SwiftRichString.Color {
    get
  }
  convenience public init(hexString: Swift.String)
  convenience public init(hex: Swift.UInt32, useAlpha alphaChannel: Swift.Bool = false)
}
extension Swift.String : SwiftRichString.ColorConvertible {
  public var color: SwiftRichString.Color {
    get
  }
}
public typealias Color = UIKit.UIColor
public typealias Image = UIKit.UIImage
public typealias Font = UIKit.UIFont
public typealias FontDescriptor = UIKit.UIFontDescriptor
public typealias SymbolicTraits = UIKit.UIFontDescriptor.SymbolicTraits
public typealias LineBreak = UIKit.NSLineBreakMode
public enum Kerning {
  case point(CoreGraphics.CGFloat)
  case adobe(CoreGraphics.CGFloat)
  public func kerning(for font: SwiftRichString.Font?) -> CoreGraphics.CGFloat
}
public enum Ligatures : Swift.Int {
  case disabled
  case defaults
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum HeadingLevel : Swift.Int {
  case none
  case one
  case two
  case three
  case four
  case five
  case six
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct TraitVariant : Swift.OptionSet {
  public var rawValue: Swift.Int
  public static let italic: SwiftRichString.TraitVariant
  public static let bold: SwiftRichString.TraitVariant
  public static let expanded: SwiftRichString.TraitVariant
  public static let condensed: SwiftRichString.TraitVariant
  public static let vertical: SwiftRichString.TraitVariant
  public static let uiOptimized: SwiftRichString.TraitVariant
  public static let tightLineSpacing: SwiftRichString.TraitVariant
  public static let looseLineSpacing: SwiftRichString.TraitVariant
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = SwiftRichString.TraitVariant
  public typealias Element = SwiftRichString.TraitVariant
  public typealias RawValue = Swift.Int
}
public class DynamicText {
  public var style: UIKit.UIFont.TextStyle?
  public var traitCollection: UIKit.UITraitCollection?
  public var maximumSize: CoreGraphics.CGFloat?
  public typealias InitHandler = ((SwiftRichString.DynamicText) -> (Swift.Void))
  public init(_ handler: SwiftRichString.DynamicText.InitHandler? = nil)
  @objc deinit
}
extension Swift.String {
  public func escapeWithUnicodeEntities() -> Swift.String
}
extension Swift.Array where Element == SwiftRichString.StyleProtocol {
  public func mergeStyle() -> SwiftRichString.Style
}
public protocol FontConvertible {
  func font(size: CoreGraphics.CGFloat?) -> SwiftRichString.Font
}
extension UIKit.UIFont : SwiftRichString.FontConvertible {
  public func font(size: CoreGraphics.CGFloat?) -> SwiftRichString.Font
}
extension Swift.String : SwiftRichString.FontConvertible {
  public func font(size: CoreGraphics.CGFloat?) -> SwiftRichString.Font
}
public struct FontData {
  public var dynamicText: SwiftRichString.DynamicText? {
    get
    set
  }
  public func attributes(currentFont: SwiftRichString.FontConvertible?, size currentSize: CoreGraphics.CGFloat?) -> [Foundation.NSAttributedString.Key : Any]
}
public protocol FontInfoAttribute {
  func featureSettings() -> [(type: Swift.Int, selector: Swift.Int)]
}
extension SwiftRichString.FontInfoAttribute {
  public func attributes() -> [[SwiftRichString.FontDescriptor.FeatureKey : Any]]
}
public enum NumberCase : SwiftRichString.FontInfoAttribute {
  case upper
  case lower
  public func featureSettings() -> [(type: Swift.Int, selector: Swift.Int)]
  public static func == (a: SwiftRichString.NumberCase, b: SwiftRichString.NumberCase) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum NumberSpacing : SwiftRichString.FontInfoAttribute {
  case monospaced
  case proportional
  public func featureSettings() -> [(type: Swift.Int, selector: Swift.Int)]
  public static func == (a: SwiftRichString.NumberSpacing, b: SwiftRichString.NumberSpacing) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Fractions : SwiftRichString.FontInfoAttribute {
  case disabled
  case diagonal
  case vertical
  public func featureSettings() -> [(type: Swift.Int, selector: Swift.Int)]
  public static func == (a: SwiftRichString.Fractions, b: SwiftRichString.Fractions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SmallCaps : SwiftRichString.FontInfoAttribute {
  case disabled
  case fromUppercase
  case fromLowercase
  public func featureSettings() -> [(type: Swift.Int, selector: Swift.Int)]
  public static func == (a: SwiftRichString.SmallCaps, b: SwiftRichString.SmallCaps) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct StylisticAlternates {
  public init()
}
extension SwiftRichString.StylisticAlternates {
  public static func one(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
  public static func two(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
  public static func three(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
  public static func four(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
  public static func five(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
  public static func six(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
  public static func seven(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
  public static func eight(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
  public static func nine(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
  public static func ten(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
  public static func eleven(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
  public static func twelve(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
  public static func thirteen(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
  public static func fourteen(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
  public static func fifteen(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
  public static func sixteen(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
  public static func seventeen(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
  public static func eighteen(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
  public static func nineteen(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
  public static func twenty(on isOn: Swift.Bool) -> SwiftRichString.StylisticAlternates
}
extension SwiftRichString.StylisticAlternates {
  public mutating func add(other theOther: SwiftRichString.StylisticAlternates)
  public func byAdding(other theOther: SwiftRichString.StylisticAlternates) -> SwiftRichString.StylisticAlternates
}
extension SwiftRichString.StylisticAlternates : SwiftRichString.FontInfoAttribute {
  public func featureSettings() -> [(type: Swift.Int, selector: Swift.Int)]
}
public func + (lhs: SwiftRichString.StylisticAlternates, rhs: SwiftRichString.StylisticAlternates) -> SwiftRichString.StylisticAlternates
public struct ContextualAlternates {
  public init()
}
extension SwiftRichString.ContextualAlternates {
  public static func contextualAlternates(on isOn: Swift.Bool) -> SwiftRichString.ContextualAlternates
  public static func swashAlternates(on isOn: Swift.Bool) -> SwiftRichString.ContextualAlternates
  public static func contextualSwashAlternates(on isOn: Swift.Bool) -> SwiftRichString.ContextualAlternates
}
extension SwiftRichString.ContextualAlternates {
  public mutating func add(other theOther: SwiftRichString.ContextualAlternates)
  public func byAdding(other theOther: SwiftRichString.ContextualAlternates) -> SwiftRichString.ContextualAlternates
}
extension SwiftRichString.ContextualAlternates : SwiftRichString.FontInfoAttribute {
  public func featureSettings() -> [(type: Swift.Int, selector: Swift.Int)]
}
public func + (lhs: SwiftRichString.ContextualAlternates, rhs: SwiftRichString.ContextualAlternates) -> SwiftRichString.ContextualAlternates
public struct OrderedDictionary<K, V> where K : Swift.Hashable {
  public var count: Swift.Int {
    get
  }
  public subscript(key: K) -> V? {
    get
    set(newValue)
  }
  public mutating func remove(key: K) -> V?
}
extension SwiftRichString.OrderedDictionary : Swift.Sequence {
  public func makeIterator() -> Swift.AnyIterator<V>
  public typealias Element = V
  public typealias Iterator = Swift.AnyIterator<V>
}
extension SwiftRichString.OrderedDictionary : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SwiftRichString.OrderedDictionary : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (K, V)...)
  public typealias Key = K
  public typealias Value = V
}
extension Swift.String {
  public func set(style: Swift.String, range: Foundation.NSRange? = nil) -> SwiftRichString.AttributedString?
  public func set(styles: [Swift.String], range: Foundation.NSRange? = nil) -> SwiftRichString.AttributedString?
  public func set(style: SwiftRichString.StyleProtocol, range: Foundation.NSRange? = nil) -> SwiftRichString.AttributedString
  public func set(styles: [SwiftRichString.StyleProtocol], range: Foundation.NSRange? = nil) -> SwiftRichString.AttributedString
}
public func + (lhs: Swift.String, rhs: SwiftRichString.StyleProtocol) -> SwiftRichString.AttributedString
extension Foundation._NSRange {
  public func `in`(_ str: Swift.String) -> Swift.Range<Swift.String.Index>?
}
extension Swift.String {
  public func rangeFrom(nsRange: Foundation.NSRange) -> Swift.Range<Swift.String.Index>?
  public func substring(from: Swift.Int?, length: Swift.Int) -> Swift.String?
  public subscript(index: Swift.Int) -> Swift.Character? {
    get
  }
  public subscript(range: Swift.Range<Swift.Int>) -> Swift.Substring? {
    get
  }
  public subscript(value: Swift.PartialRangeUpTo<Swift.Int>) -> Swift.Substring? {
    get
  }
  public subscript(range: Swift.ClosedRange<Swift.Int>) -> Swift.Substring? {
    get
  }
  public subscript(value: Swift.PartialRangeFrom<Swift.Int>) -> Swift.Substring? {
    get
  }
  public subscript(value: Swift.PartialRangeThrough<Swift.Int>) -> Swift.Substring? {
    get
  }
  public func removing(prefix: Swift.String) -> Swift.String
  public func removing(suffix: Swift.String) -> Swift.String
}
extension Swift.Substring {
  public var string: Swift.String {
    get
  }
}
public class Style : SwiftRichString.StyleProtocol {
  public typealias StyleInitHandler = ((SwiftRichString.Style) -> (Swift.Void))
  public var fontData: SwiftRichString.FontData?
  public var textTransforms: [SwiftRichString.TextTransform]?
  public var size: CoreGraphics.CGFloat? {
    get
    set
  }
  public var font: SwiftRichString.FontConvertible? {
    get
    set
  }
  @available(iOS 11.0, tvOS 11.0, iOSApplicationExtension 11.0, watchOS 4, *)
  public var dynamicText: SwiftRichString.DynamicText? {
    get
    set
  }
  public var color: SwiftRichString.ColorConvertible? {
    get
    set
  }
  public var backColor: SwiftRichString.ColorConvertible? {
    get
    set
  }
  public var underline: (style: UIKit.NSUnderlineStyle?, color: SwiftRichString.ColorConvertible?)? {
    get
    set
  }
  public var stroke: (color: SwiftRichString.ColorConvertible?, width: Swift.Float?)? {
    get
    set
  }
  public var strikethrough: (style: UIKit.NSUnderlineStyle?, color: SwiftRichString.ColorConvertible?)? {
    get
    set
  }
  public var baselineOffset: Swift.Float? {
    get
    set
  }
  public var paragraph: UIKit.NSMutableParagraphStyle {
    get
    set
  }
  public var lineSpacing: CoreGraphics.CGFloat {
    get
    set
  }
  public var paragraphSpacingBefore: CoreGraphics.CGFloat {
    get
    set
  }
  public var paragraphSpacingAfter: CoreGraphics.CGFloat {
    get
    set
  }
  public var alignment: UIKit.NSTextAlignment {
    get
    set
  }
  public var firstLineHeadIndent: CoreGraphics.CGFloat {
    get
    set
  }
  public var headIndent: CoreGraphics.CGFloat {
    get
    set
  }
  public var tailIndent: CoreGraphics.CGFloat {
    get
    set
  }
  public var lineBreakMode: SwiftRichString.LineBreak {
    get
    set
  }
  public var minimumLineHeight: CoreGraphics.CGFloat {
    get
    set
  }
  public var maximumLineHeight: CoreGraphics.CGFloat {
    get
    set
  }
  public var baseWritingDirection: UIKit.NSWritingDirection {
    get
    set
  }
  public var lineHeightMultiple: CoreGraphics.CGFloat {
    get
    set
  }
  public var hyphenationFactor: Swift.Float {
    get
    set
  }
  public var ligatures: SwiftRichString.Ligatures? {
    get
    set
  }
  public var shadow: UIKit.NSShadow? {
    get
    set
  }
  public var speaksPunctuation: Swift.Bool? {
    get
    set
  }
  public var speakingLanguage: Swift.String? {
    get
    set
  }
  public var speakingPitch: Swift.Double? {
    get
    set
  }
  @available(iOS 11.0, tvOS 11.0, iOSApplicationExtension 11.0, watchOS 4, *)
  public var speakingPronunciation: Swift.String? {
    get
    set
  }
  @available(iOS 11.0, tvOS 11.0, iOSApplicationExtension 11.0, watchOS 4, *)
  public var shouldQueueSpeechAnnouncement: Swift.Bool? {
    get
    set
  }
  @available(iOS 11.0, tvOS 11.0, iOSApplicationExtension 11.0, watchOS 4, *)
  public var headingLevel: SwiftRichString.HeadingLevel? {
    get
    set
  }
  public var linkURL: SwiftRichString.URLRepresentable? {
    get
    set
  }
  public var numberCase: SwiftRichString.NumberCase? {
    get
    set
  }
  public var numberSpacing: SwiftRichString.NumberSpacing? {
    get
    set
  }
  public var fractions: SwiftRichString.Fractions? {
    get
    set
  }
  public var superscript: Swift.Bool? {
    get
    set
  }
  public var `subscript`: Swift.Bool? {
    get
    set
  }
  public var ordinals: Swift.Bool? {
    get
    set
  }
  public var scientificInferiors: Swift.Bool? {
    get
    set
  }
  public var smallCaps: Swift.Set<SwiftRichString.SmallCaps> {
    get
    set
  }
  public var stylisticAlternates: SwiftRichString.StylisticAlternates {
    get
    set
  }
  public var contextualAlternates: SwiftRichString.ContextualAlternates {
    get
    set
  }
  public var kerning: SwiftRichString.Kerning? {
    get
    set
  }
  public var traitVariants: SwiftRichString.TraitVariant? {
    get
    set
  }
  public init(_ handler: SwiftRichString.Style.StyleInitHandler? = nil)
  public init(dictionary: [Foundation.NSAttributedString.Key : Any]?, textTransforms: [SwiftRichString.TextTransform]? = nil)
  public init(style: SwiftRichString.Style)
  public func set<T>(attribute value: T?, forKey key: Foundation.NSAttributedString.Key)
  public func get<T>(attributeForKey key: Foundation.NSAttributedString.Key) -> T?
  public var attributes: [Foundation.NSAttributedString.Key : Any] {
    get
  }
  public func byAdding(_ handler: (SwiftRichString.Style) -> (Swift.Void)) -> SwiftRichString.Style
  @objc deinit
}
public typealias StyleGroup = SwiftRichString.StyleXML
public class StyleXML : SwiftRichString.StyleProtocol {
  public var attributes: [Foundation.NSAttributedString.Key : Any]
  public var fontData: SwiftRichString.FontData?
  public var textTransforms: [SwiftRichString.TextTransform]?
  public var styles: [Swift.String : SwiftRichString.StyleProtocol] {
    get
  }
  public var baseStyle: SwiftRichString.StyleProtocol?
  public var xmlParsingOptions: SwiftRichString.XMLParsingOptions
  public var imageProvider: ((_ name: Swift.String, _ attributes: [Swift.String : Swift.String]?) -> SwiftRichString.Image?)?
  public var xmlAttributesResolver: SwiftRichString.XMLDynamicAttributesResolver
  public init(base: SwiftRichString.StyleProtocol? = nil, _ styles: [Swift.String : SwiftRichString.StyleProtocol] = [:])
  public func add(style: SwiftRichString.Style, as name: Swift.String)
  @discardableResult
  public func remove(style name: Swift.String) -> SwiftRichString.StyleProtocol?
  public func set(to source: Swift.String, range: Foundation.NSRange?) -> SwiftRichString.AttributedString
  public func add(to source: SwiftRichString.AttributedString, range: Foundation.NSRange?) -> SwiftRichString.AttributedString
  public func set(to source: SwiftRichString.AttributedString, range: Foundation.NSRange?) -> SwiftRichString.AttributedString
  public func apply(to attrStr: SwiftRichString.AttributedString, adding: Swift.Bool, range: Foundation.NSRange?) -> SwiftRichString.AttributedString
  @objc deinit
}
public typealias AttributedString = Foundation.NSMutableAttributedString
public protocol StyleProtocol : AnyObject {
  var attributes: [Foundation.NSAttributedString.Key : Any] { get }
  var fontData: SwiftRichString.FontData? { get }
  var textTransforms: [SwiftRichString.TextTransform]? { get }
  func set(to source: Swift.String, range: Foundation.NSRange?) -> SwiftRichString.AttributedString
  func add(to source: SwiftRichString.AttributedString, range: Foundation.NSRange?) -> SwiftRichString.AttributedString
  @discardableResult
  func set(to source: SwiftRichString.AttributedString, range: Foundation.NSRange?) -> SwiftRichString.AttributedString
  @discardableResult
  func remove(from source: SwiftRichString.AttributedString, range: Foundation.NSRange?) -> SwiftRichString.AttributedString
}
extension SwiftRichString.StyleProtocol {
  public func set(to source: Swift.String, range: Foundation.NSRange?) -> SwiftRichString.AttributedString
  public func add(to source: SwiftRichString.AttributedString, range: Foundation.NSRange?) -> SwiftRichString.AttributedString
  @discardableResult
  public func set(to source: SwiftRichString.AttributedString, range: Foundation.NSRange?) -> SwiftRichString.AttributedString
  @discardableResult
  public func remove(from source: SwiftRichString.AttributedString, range: Foundation.NSRange?) -> SwiftRichString.AttributedString
}
public class StyleRegEx : SwiftRichString.StyleProtocol {
  public var regex: Foundation.NSRegularExpression {
    get
  }
  public var baseStyle: SwiftRichString.StyleProtocol? {
    get
  }
  public var attributes: [Foundation.NSAttributedString.Key : Any] {
    get
  }
  public var textTransforms: [SwiftRichString.TextTransform]?
  public var fontData: SwiftRichString.FontData? {
    get
  }
  public init?(base: SwiftRichString.StyleProtocol? = nil, pattern: Swift.String, options: Foundation.NSRegularExpression.Options = .caseInsensitive, handler: @escaping SwiftRichString.Style.StyleInitHandler)
  public func set(to source: Swift.String, range: Foundation.NSRange?) -> SwiftRichString.AttributedString
  public func add(to source: SwiftRichString.AttributedString, range: Foundation.NSRange?) -> SwiftRichString.AttributedString
  public func set(to source: SwiftRichString.AttributedString, range: Foundation.NSRange?) -> SwiftRichString.AttributedString
  @objc deinit
}
public let Styles: SwiftRichString.StylesManager
@_hasMissingDesignatedInitializers public class StylesManager {
  public static let shared: SwiftRichString.StylesManager
  public var onDeferStyle: ((Swift.String) -> (SwiftRichString.StyleProtocol?, Swift.Bool))?
  public var styles: [Swift.String : SwiftRichString.StyleProtocol] {
    get
  }
  public func register(_ name: Swift.String, style: SwiftRichString.StyleProtocol)
  public subscript(name: Swift.String?) -> SwiftRichString.StyleProtocol? {
    get
  }
  public subscript(names: [Swift.String]?) -> [SwiftRichString.StyleProtocol]? {
    get
  }
  @objc deinit
}
public enum SystemFonts : Swift.String, SwiftRichString.FontConvertible {
  case Copperplate_Light
  case Copperplate
  case Copperplate_Bold
  case AppleSDGothicNeo_Thin
  case AppleSDGothicNeo_Light
  case AppleSDGothicNeo_Regular
  case AppleSDGothicNeo_Bold
  case AppleSDGothicNeo_SemiBold
  case AppleSDGothicNeo_UltraLight
  case AppleSDGothicNeo_Medium
  case Thonburi
  case Thonburi_Light
  case Thonburi_Bold
  case GillSans_Italic
  case GillSans_SemiBold
  case GillSans_UltraBold
  case GillSans_Light
  case GillSans_Bold
  case GillSans
  case GillSans_SemiBoldItalic
  case GillSans_BoldItalic
  case GillSans_LightItalic
  case MarkerFelt_Thin
  case MarkerFelt_Wide
  case HiraMaruProN_W4
  case CourierNewPS_ItalicMT
  case CourierNewPSMT
  case CourierNewPS_BoldItalicMT
  case CourierNewPS_BoldMT
  case KohinoorTelugu_Regular
  case KohinoorTelugu_Medium
  case KohinoorTelugu_Light
  case AvenirNextCondensed_Heavy
  case AvenirNextCondensed_MediumItalic
  case AvenirNextCondensed_Regular
  case AvenirNextCondensed_UltraLightItalic
  case AvenirNextCondensed_Medium
  case AvenirNextCondensed_HeavyItalic
  case AvenirNextCondensed_DemiBoldItalic
  case AvenirNextCondensed_Bold
  case AvenirNextCondensed_DemiBold
  case AvenirNextCondensed_BoldItalic
  case AvenirNextCondensed_Italic
  case AvenirNextCondensed_UltraLight
  case TamilSangamMN
  case TamilSangamMN_Bold
  case HelveticaNeue_UltraLightItalic
  case HelveticaNeue_Medium
  case HelveticaNeue_MediumItalic
  case HelveticaNeue_UltraLight
  case HelveticaNeue_Italic
  case HelveticaNeue_Light
  case HelveticaNeue_ThinItalic
  case HelveticaNeue_LightItalic
  case HelveticaNeue_Bold
  case HelveticaNeue_Thin
  case HelveticaNeue_CondensedBlack
  case HelveticaNeue
  case HelveticaNeue_CondensedBold
  case HelveticaNeue_BoldItalic
  case GurmukhiMN_Bold
  case GurmukhiMN
  case Georgia_BoldItalic
  case Georgia_Italic
  case Georgia
  case Georgia_Bold
  case TimesNewRomanPS_ItalicMT
  case TimesNewRomanPS_BoldItalicMT
  case TimesNewRomanPS_BoldMT
  case TimesNewRomanPSMT
  case SinhalaSangamMN_Bold
  case SinhalaSangamMN
  case ArialRoundedMTBold
  case Kailasa_Bold
  case Kailasa
  case KohinoorDevanagari_Regular
  case KohinoorDevanagari_Light
  case KohinoorDevanagari_Semibold
  case KohinoorBangla_Regular
  case KohinoorBangla_Semibold
  case KohinoorBangla_Light
  case ChalkboardSE_Bold
  case ChalkboardSE_Light
  case ChalkboardSE_Regular
  case AppleColorEmoji
  case PingFangTC_Regular
  case PingFangTC_Thin
  case PingFangTC_Medium
  case PingFangTC_Semibold
  case PingFangTC_Light
  case PingFangTC_Ultralight
  case GujaratiSangamMN
  case GujaratiSangamMN_Bold
  case GeezaPro_Bold
  case GeezaPro
  case DamascusBold
  case DamascusLight
  case Damascus
  case DamascusMedium
  case DamascusSemiBold
  case Noteworthy_Bold
  case Noteworthy_Light
  case Avenir_Oblique
  case Avenir_HeavyOblique
  case Avenir_Heavy
  case Avenir_BlackOblique
  case Avenir_BookOblique
  case Avenir_Roman
  case Avenir_Medium
  case Avenir_Black
  case Avenir_Light
  case Avenir_MediumOblique
  case Avenir_Book
  case Avenir_LightOblique
  case DiwanMishafi
  case AcademyEngravedLetPlain
  case Futura_CondensedExtraBold
  case Futura_Medium
  case Futura_Bold
  case Futura_CondensedMedium
  case Futura_MediumItalic
  case PartyLetPlain
  case KannadaSangamMN_Bold
  case KannadaSangamMN
  case ArialHebrew_Bold
  case ArialHebrew_Light
  case ArialHebrew
  case Farah
  case Arial_BoldMT
  case Arial_BoldItalicMT
  case Arial_ItalicMT
  case ArialMT
  case Chalkduster
  case Kefa_Regular
  case HoeflerText_Italic
  case HoeflerText_Black
  case HoeflerText_Regular
  case HoeflerText_BlackItalic
  case Optima_ExtraBlack
  case Optima_BoldItalic
  case Optima_Italic
  case Optima_Regular
  case Optima_Bold
  case Palatino_Italic
  case Palatino_Roman
  case Palatino_BoldItalic
  case Palatino_Bold
  case MalayalamSangamMN_Bold
  case MalayalamSangamMN
  case AlNile
  case AlNile_Bold
  case LaoSangamMN
  case BradleyHandITCTT_Bold
  case HiraMinProN_W3
  case HiraMinProN_W6
  case PingFangHK_Medium
  case PingFangHK_Thin
  case PingFangHK_Regular
  case PingFangHK_Ultralight
  case PingFangHK_Semibold
  case PingFangHK_Light
  case Helvetica_Oblique
  case Helvetica_BoldOblique
  case Helvetica
  case Helvetica_Light
  case Helvetica_Bold
  case Helvetica_LightOblique
  case Courier_BoldOblique
  case Courier_Oblique
  case Courier
  case Courier_Bold
  case Cochin_Italic
  case Cochin_Bold
  case Cochin
  case Cochin_BoldItalic
  case TrebuchetMS_Bold
  case TrebuchetMS_Italic
  case Trebuchet_BoldItalic
  case TrebuchetMS
  case DevanagariSangamMN
  case DevanagariSangamMN_Bold
  case OriyaSangamMN
  case OriyaSangamMN_Bold
  case Rockwell_Italic
  case Rockwell_Regular
  case Rockwell_Bold
  case Rockwell_BoldItalic
  case SnellRoundhand
  case SnellRoundhand_Bold
  case SnellRoundhand_Black
  case ZapfDingbatsITC
  case BodoniSvtyTwoITCTT_Bold
  case BodoniSvtyTwoITCTT_BookIta
  case BodoniSvtyTwoITCTT_Book
  case Verdana_Italic
  case Verdana
  case Verdana_Bold
  case Verdana_BoldItalic
  case AmericanTypewriter_CondensedBold
  case AmericanTypewriter_Condensed
  case AmericanTypewriter_CondensedLight
  case AmericanTypewriter
  case AmericanTypewriter_Bold
  case AmericanTypewriter_Semibold
  case AmericanTypewriter_Light
  case AvenirNext_Medium
  case AvenirNext_DemiBoldItalic
  case AvenirNext_DemiBold
  case AvenirNext_HeavyItalic
  case AvenirNext_Regular
  case AvenirNext_Italic
  case AvenirNext_MediumItalic
  case AvenirNext_UltraLightItalic
  case AvenirNext_BoldItalic
  case AvenirNext_Heavy
  case AvenirNext_Bold
  case AvenirNext_UltraLight
  case Baskerville_SemiBoldItalic
  case Baskerville_SemiBold
  case Baskerville_BoldItalic
  case Baskerville
  case Baskerville_Bold
  case Baskerville_Italic
  case KhmerSangamMN
  case Didot_Bold
  case Didot
  case Didot_Italic
  case SavoyeLetPlain
  case BodoniOrnamentsITCTT
  case Symbol
  case Charter_BlackItalic
  case Charter_Bold
  case Charter_Roman
  case Charter_Black
  case Charter_BoldItalic
  case Charter_Italic
  case Menlo_BoldItalic
  case Menlo_Bold
  case Menlo_Italic
  case Menlo_Regular
  case NotoNastaliqUrdu
  case BodoniSvtyTwoSCITCTT_Book
  case DINAlternate_Bold
  case Papyrus_Condensed
  case Papyrus
  case HiraginoSans_W3
  case HiraginoSans_W6
  case PingFangSC_Medium
  case PingFangSC_Semibold
  case PingFangSC_Light
  case PingFangSC_Ultralight
  case PingFangSC_Regular
  case PingFangSC_Thin
  case MyanmarSangamMN
  case MyanmarSangamMN_Bold
  case Zapfino
  case BodoniSvtyTwoOSITCTT_BookIt
  case BodoniSvtyTwoOSITCTT_Book
  case BodoniSvtyTwoOSITCTT_Bold
  case EuphemiaUCAS
  case EuphemiaUCAS_Italic
  case EuphemiaUCAS_Bold
  case DINCondensed_Bold
  public func font(size: CoreGraphics.CGFloat?) -> SwiftRichString.Font
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TextTransform {
  public typealias TransformFunction = (Swift.String) -> Swift.String
  case lowercase
  case uppercase
  case capitalized
  case lowercaseWithLocale(Foundation.Locale)
  case uppercaseWithLocale(Foundation.Locale)
  case capitalizedWithLocale(Foundation.Locale)
  case custom(SwiftRichString.TextTransform.TransformFunction)
}
extension UIKit.UILabel {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var styleName: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var style: SwiftRichString.StyleProtocol? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var styledText: Swift.String? {
    get
    set
  }
}
extension UIKit.UITextField {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var styleName: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var style: SwiftRichString.StyleProtocol? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var styledText: Swift.String? {
    get
    set
  }
}
extension UIKit.UITextView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var styleName: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var style: SwiftRichString.StyleProtocol? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var styledText: Swift.String? {
    get
    set
  }
}
public protocol URLRepresentable {
  var url: Foundation.URL { get }
}
extension Foundation.URL : SwiftRichString.URLRepresentable {
  public var url: Foundation.URL {
    get
  }
  public init?(string: Swift.String?)
}
public protocol XMLDynamicAttributesResolver {
  func image(name: Swift.String, attributes: [Swift.String : Swift.String]?, fromStyle style: SwiftRichString.StyleXML) -> SwiftRichString.Image?
  func applyDynamicAttributes(to attributedString: inout SwiftRichString.AttributedString, xmlStyle: SwiftRichString.XMLDynamicStyle, fromStyle: SwiftRichString.StyleXML)
  func styleForUnknownXMLTag(_ tag: Swift.String, to attributedString: inout SwiftRichString.AttributedString, attributes: [Swift.String : Swift.String]?, fromStyle: SwiftRichString.StyleXML)
}
extension SwiftRichString.XMLDynamicAttributesResolver {
  public func image(name: Swift.String, attributes: [Swift.String : Swift.String]?, fromStyle style: SwiftRichString.StyleXML) -> SwiftRichString.Image?
}
open class StandardXMLAttributesResolver : SwiftRichString.XMLDynamicAttributesResolver {
  public init()
  open func applyDynamicAttributes(to attributedString: inout SwiftRichString.AttributedString, xmlStyle: SwiftRichString.XMLDynamicStyle, fromStyle: SwiftRichString.StyleXML)
  open func styleForUnknownXMLTag(_ tag: Swift.String, to attributedString: inout SwiftRichString.AttributedString, attributes: [Swift.String : Swift.String]?, fromStyle: SwiftRichString.StyleXML)
  @objc deinit
}
public struct XMLStringBuilderError : Swift.Error {
  public let parserError: Swift.Error
  public let line: Swift.Int
  public let column: Swift.Int
}
public struct XMLParsingOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let doNotWrapXML: SwiftRichString.XMLParsingOptions
  public static let escapeString: SwiftRichString.XMLParsingOptions
  public typealias ArrayLiteralElement = SwiftRichString.XMLParsingOptions
  public typealias Element = SwiftRichString.XMLParsingOptions
  public typealias RawValue = Swift.Int
}
@objc public class XMLStringBuilder : ObjectiveC.NSObject, Foundation.XMLParserDelegate {
  public var xmlAttributesResolver: SwiftRichString.XMLDynamicAttributesResolver {
    get
  }
  public init(styleXML: SwiftRichString.StyleXML, string: Swift.String)
  public func parse() throws -> SwiftRichString.AttributedString
  @objc public func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String])
  @objc public func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
  @objc public func parser(_ parser: Foundation.XMLParser, foundCharacters string: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class XMLDynamicStyle {
  final public let tag: Swift.String
  final public let style: SwiftRichString.StyleProtocol?
  final public let xmlAttributes: [Swift.String : Swift.String]?
  public func enumerateAttributes(_ handler: ((_ key: Swift.String, _ value: Swift.String) -> Swift.Void))
  @objc deinit
}
extension SwiftRichString.Ligatures : Swift.Equatable {}
extension SwiftRichString.Ligatures : Swift.Hashable {}
extension SwiftRichString.Ligatures : Swift.RawRepresentable {}
extension SwiftRichString.HeadingLevel : Swift.Equatable {}
extension SwiftRichString.HeadingLevel : Swift.Hashable {}
extension SwiftRichString.HeadingLevel : Swift.RawRepresentable {}
extension SwiftRichString.NumberCase : Swift.Equatable {}
extension SwiftRichString.NumberCase : Swift.Hashable {}
extension SwiftRichString.NumberSpacing : Swift.Equatable {}
extension SwiftRichString.NumberSpacing : Swift.Hashable {}
extension SwiftRichString.Fractions : Swift.Equatable {}
extension SwiftRichString.Fractions : Swift.Hashable {}
extension SwiftRichString.SmallCaps : Swift.Equatable {}
extension SwiftRichString.SmallCaps : Swift.Hashable {}
extension SwiftRichString.SystemFonts : Swift.Equatable {}
extension SwiftRichString.SystemFonts : Swift.Hashable {}
extension SwiftRichString.SystemFonts : Swift.RawRepresentable {}
