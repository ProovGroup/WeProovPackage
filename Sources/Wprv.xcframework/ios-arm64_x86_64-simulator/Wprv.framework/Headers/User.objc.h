// Objective-C API for talking to github.com/ProovGroup/weproov-sdk-go/user Go package.
//   gobind -lang=objc github.com/ProovGroup/weproov-sdk-go/user
//
// File is generated by gobind. Do not edit.

#ifndef __User_H__
#define __User_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Cachedimage.objc.h"
#include "Category.objc.h"
#include "Config.objc.h"
#include "Fscache.objc.h"
#include "Keyvalue.objc.h"
#include "Rights.objc.h"
#include "Translations.objc.h"
#include "Utils.objc.h"
#include "Wperr.objc.h"

@class UserExtraInfos;
@class UserGrantTokenStruct;
@class UserStruct;
@class UserUserTokenStruct;
@protocol UserDelegate;
@class UserDelegate;
@protocol UserRecoverDelegate;
@class UserRecoverDelegate;
@protocol UserRefreshDelegate;
@class UserRefreshDelegate;
@protocol UserUploadDelegate;
@class UserUploadDelegate;

@protocol UserDelegate <NSObject>
- (void)onUserError:(NSError* _Nullable)error;
- (void)onUserLock:(NSError* _Nullable)err;
- (void)onUserNeedMultipleAuthentication:(long)processID webviewURL:(NSString* _Nullable)webviewURL;
- (void)onUserSuccess:(UserStruct* _Nullable)user;
@end

@protocol UserRecoverDelegate <NSObject>
- (void)onRecoverError:(NSError* _Nullable)err;
- (void)onRecoverSuccess;
@end

@protocol UserRefreshDelegate <NSObject>
- (void)refreshError:(NSError* _Nullable)err;
- (void)refreshSuccess:(UserStruct* _Nullable)p0;
@end

@protocol UserUploadDelegate <NSObject>
- (void)onUploadError:(NSError* _Nullable)err;
- (void)onUploadSuccess;
@end

@interface UserExtraInfos : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull name;
@property (nonatomic) NSString* _Nonnull value;
@property (nonatomic) NSString* _Nonnull type;
@property (nonatomic) long title;
// skipped field ExtraInfos.Title_ with unsupported type: github.com/ProovGroup/weproov-sdk-go/translations.Translation

@end

@interface UserGrantTokenStruct : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull grantToken;
@property (nonatomic) long id_;
@property (nonatomic) NSString* _Nonnull webviewURL;
@end

@interface UserStruct : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) long id_;
@property (nonatomic) NSString* _Nonnull username;
@property (nonatomic) NSString* _Nonnull email;
@property (nonatomic) NSString* _Nonnull type;
@property (nonatomic) NSString* _Nonnull firstName;
@property (nonatomic) NSString* _Nonnull lastName;
@property (nonatomic) NSString* _Nonnull cell;
@property (nonatomic) NSString* _Nonnull primaryColor;
@property (nonatomic) NSString* _Nonnull address;
@property (nonatomic) BOOL cellCertified;
@property (nonatomic) BOOL enterprise;
@property (nonatomic) long enterpriseId;
@property (nonatomic) long picture;
@property (nonatomic) long imageReport;
@property (nonatomic) NSString* _Nonnull accessToken;
@property (nonatomic) NSString* _Nonnull cryptoKey;
@property (nonatomic) NSString* _Nonnull company;
@property (nonatomic) NSString* _Nonnull lang;
@property (nonatomic) NSString* _Nonnull country;
// skipped field Struct.CreatedAt with unsupported type: time.Time

// skipped field Struct.UpdatedAt with unsupported type: time.Time

@property (nonatomic) BOOL multipleAuth;
@property (nonatomic) NSString* _Nonnull webview;
- (void)changePassword:(NSString* _Nullable)oldPassword newPassword:(NSString* _Nullable)newPassword delegate:(id<UserDelegate> _Nullable)delegate;
- (void)downloadProfilPicture:(id<CachedimageDelegate> _Nullable)delegate;
- (NSString* _Nonnull)getCKey;
/**
 * 	Permet de recuperer le nom concatener du prenom
 */
- (NSString* _Nonnull)getFullName;
/**
 * 	Recupere l'id representant les proprietaires
	si l'utilisateur fait partie d'une entreprise le owner == user.EnterpriseId
	sinon le owner == user.ID
 */
- (long)getOwner;
/**
 * 	Verifie si l'utilisateur et logger
 */
- (BOOL)isLogged;
- (BOOL)isMaster;
/**
 * 	Verifie que l'utilisateur est un utilisateur premium
 */
- (BOOL)isPremium;
/**
 * 	Lis une JSON string pour en extraire l'utilisateur
 */
- (BOOL)loadFromString:(NSString* _Nullable)value;
- (void)refresh:(id<UserRefreshDelegate> _Nullable)delegate;
/**
 * 	recharge le profil d'un utilisateur
	à partir de l'API
 */
- (BOOL)refreshSync:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * 	Sauvegarde les champs editable en les envoyans dans l'api
 */
- (void)save:(id<UserDelegate> _Nullable)delegate;
/**
 * 	Sauvegarde dans la bdd sur le device l'utilisateur
 */
- (void)saveLocal;
/**
 * 	Sauvegarde les champs editable en les envoyans dans l'api
 */
- (BOOL)saveSync:(NSError* _Nullable* _Nullable)error;
- (void)testPin:(NSString* _Nullable)pin delegate:(id<UserDelegate> _Nullable)delegate;
/**
 * 	Envoye le code reçue par sms pour le verifier sur l'api
	si la reponce est 200 le telephone est valider
 */
- (BOOL)testPinSync:(NSString* _Nullable)pin error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)toJson:(NSError* _Nullable* _Nullable)error;
/**
 * 	Met a jour le telephone sur l'api et declanche un sms
	Cette fonction fait juste appele UpdateCellSync a partir d'une goroutine
 */
- (void)updateCell:(NSString* _Nullable)cell delegate:(id<UserDelegate> _Nullable)delegate;
/**
 * 	Met a jour le telephone sur l'api et declanche un sms
 */
- (BOOL)updateCellSync:(NSString* _Nullable)cell error:(NSError* _Nullable* _Nullable)error;
@end

@interface UserUserTokenStruct : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull accessToken;
@property (nonatomic) NSString* _Nonnull refreshToken;
@property (nonatomic) NSString* _Nonnull idToken;
@end

@interface User : NSObject
// skipped variable CurrentUser with unsupported type: github.com/ProovGroup/weproov-sdk-go/user.Struct

// skipped variable CurrentUserToken with unsupported type: github.com/ProovGroup/weproov-sdk-go/user.UserTokenStruct

@end

FOUNDATION_EXPORT void UserClearCache(void);

FOUNDATION_EXPORT UserStruct* _Nullable UserFromJson(NSString* _Nullable js, NSError* _Nullable* _Nullable error);

/**
 * 	Permet de recuperer l'utilisateur courant
 */
FOUNDATION_EXPORT UserStruct* _Nullable UserGetCurrent(void);

/**
 * 	Log l'utilisateur grace a son duo email + password
	cette fonction est juste un envoy en goroutine de UserLoginLocalSync
 */
FOUNDATION_EXPORT void UserLoginLocal(NSString* _Nullable identifier, NSString* _Nullable password, id<UserDelegate> _Nullable delegate);

/**
 * 	Log l'utilisateur grace a son email + password.
	un check de l'email et du mot de passe est efectuer
 */
FOUNDATION_EXPORT UserStruct* _Nullable UserLoginLocalSync(NSString* _Nullable identifier, NSString* _Nullable password, NSError* _Nullable* _Nullable error);

/**
 * 	Log l'utilisateur grace a son duo token + secret
 */
FOUNDATION_EXPORT void UserLoginOauth(id<UserDelegate> _Nullable delegate);

/**
 * 	Log l'utilisateur grace a son token + secret.
 */
FOUNDATION_EXPORT UserStruct* _Nullable UserLoginOauthSync(NSError* _Nullable* _Nullable error);

/**
 * 	Logout permet de suprimer tout les variable local qui represente l'utilisateur
 */
FOUNDATION_EXPORT void UserLogout(void);

FOUNDATION_EXPORT void UserRecoverPassword(NSString* _Nullable email, id<UserRecoverDelegate> _Nullable delegate);

/**
 * 	Envoy la demande de recuperation de password
 */
FOUNDATION_EXPORT BOOL UserRecoverPasswordSync(NSString* _Nullable email, NSError* _Nullable* _Nullable error);

/**
 * 	Permet d'enregistrer un nouvelle utilisateur
	cette fonction permet de faire passer en asynchrone
 */
FOUNDATION_EXPORT void UserRegisterNew(NSString* _Nullable identifier, NSString* _Nullable password, id<UserDelegate> _Nullable delegate);

/**
 * 	Permet d'enregistrer un nouvelle utilisateur
	- verifie l'email et le mot de passe
 */
FOUNDATION_EXPORT UserStruct* _Nullable UserRegisterNewSync(NSString* _Nullable email, NSString* _Nullable password, NSError* _Nullable* _Nullable error);

/**
 * 	Lancer a l'initialisation
	permet de recuperer le dernier profile rentrer
 */
FOUNDATION_EXPORT BOOL UserReloadFormCache(void);

FOUNDATION_EXPORT void UserSendNotificationToken(void);

FOUNDATION_EXPORT void UserUploadProfilPicture(NSData* _Nullable data, id<UserUploadDelegate> _Nullable delegate);

FOUNDATION_EXPORT BOOL UserUploadProfilPictureSync(NSString* _Nullable data, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT void UserUserDidAuthenticateWithToken(NSString* _Nullable token, id<UserDelegate> _Nullable delegate);

@class UserDelegate;

@class UserRecoverDelegate;

@class UserRefreshDelegate;

@class UserUploadDelegate;

/**
 * 	le Delegate represente les reponce possible lors

	l'enregistrement / login / test pin sms
 */
@interface UserDelegate : NSObject <goSeqRefInterface, UserDelegate> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * 		OnUserError sera appeler lors d'une erreur quelquonque
 */
- (void)onUserError:(NSError* _Nullable)error;
- (void)onUserLock:(NSError* _Nullable)err;
- (void)onUserNeedMultipleAuthentication:(long)processID webviewURL:(NSString* _Nullable)webviewURL;
/**
 * 		appeler lors login / register ces bien passez et qu il n'est pas n'ecessaire de verifier le telephone
 */
- (void)onUserSuccess:(UserStruct* _Nullable)user;
@end

@interface UserRecoverDelegate : NSObject <goSeqRefInterface, UserRecoverDelegate> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)onRecoverError:(NSError* _Nullable)err;
- (void)onRecoverSuccess;
@end

@interface UserRefreshDelegate : NSObject <goSeqRefInterface, UserRefreshDelegate> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)refreshError:(NSError* _Nullable)err;
- (void)refreshSuccess:(UserStruct* _Nullable)p0;
@end

@interface UserUploadDelegate : NSObject <goSeqRefInterface, UserUploadDelegate> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)onUploadError:(NSError* _Nullable)err;
- (void)onUploadSuccess;
@end

#endif
