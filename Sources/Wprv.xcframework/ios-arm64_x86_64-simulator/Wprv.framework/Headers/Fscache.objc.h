// Objective-C API for talking to github.com/ProovGroup/weproov-sdk-go/fscache Go package.
//   gobind -lang=objc github.com/ProovGroup/weproov-sdk-go/fscache
//
// File is generated by gobind. Do not edit.

#ifndef __Fscache_H__
#define __Fscache_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Utils.objc.h"
#include "Wperr.objc.h"

@class FscacheCache;

@interface FscacheCache : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * 	Renvoy une structure cache et creer le path si necesaire
 */
- (nullable instancetype)init:(NSString* _Nullable)name;
/**
 * le nom du cache permet de le diferencier dans les path
 */
@property (nonatomic) NSString* _Nonnull bucket;
/**
 * 	 permet de crypte les donner envoyer si la longeur est
	 plus grande que 32 et quelle est en hexa
 */
@property (nonatomic) NSString* _Nonnull cryptoKey;
/**
 * 	suprime l'integraliter des clees dans le file system
	et recreer le dossier
 */
- (void)clean;
/**
 * 	permet de recuperer le path du dossier racine former de cette facons
	BASE_PATH + /cache/ + BUCKET_NAME
 */
- (NSString* _Nonnull)getBasePath;
/**
 * 	Recuper le path d'un fichier en verifient au prealable si il existe si il n'hexiste pas renvois
	une chaine de character vide
 */
- (NSString* _Nonnull)getPath:(NSString* _Nullable)key;
- (NSString* _Nonnull)getPathWrite:(NSString* _Nullable)key;
/**
 * 	Recupere de facons synchrone la valeur d'une clee
	atention ne pas utiliser cette methode pour renvoyer dans les app ios/android
	il y a des risque que le gabage collector vide la variable et/ou creer une memoryleaks
	imporante preferer les ouverture directement dans les os respectif en recuperant le path
	avec GetPath(key string)
 */
- (NSData* _Nullable)getSync:(NSString* _Nullable)key error:(NSError* _Nullable* _Nullable)error;
/**
 * 	Verifie si une clee existe dans le cache
 */
- (BOOL)have:(NSString* _Nullable)key;
// skipped method Cache.Keys with unsupported parameter or return types

- (void)prepareKeys;
/**
 * 	Retire les clee qui on ete creer il y a plus de 168h(7j)
 */
- (void)removeExpired;
/**
 * 	suprime une clee en la retirant du file systeme
 */
- (void)removeSync:(NSString* _Nullable)key;
/**
 * 	Sauvegarde de facons synchrone le fichier
	prend en parametre la clee

	la clee est egale a au nom de du fichier seule le / son retirer
 */
- (NSString* _Nonnull)saveSync:(NSString* _Nullable)key data:(NSData* _Nullable)data error:(NSError* _Nullable* _Nullable)error;
/**
 * 	Empact tout le cache dans un fichier tar
	retourne le path ou il a ete ecris
 */
- (NSString* _Nonnull)tar:(NSError* _Nullable* _Nullable)error;
@end

@interface Fscache : NSObject
/**
 * 	Permet de stocker la base de tout les path pour les caches
 */
+ (NSString* _Nonnull) basE_PATH;
+ (void) setBASE_PATH:(NSString* _Nonnull)v;

@end

/**
 * 	Suprimme tout le contenu des caches ouvert avec RegistreNewCache
 */
FOUNDATION_EXPORT void FscacheCleanAll(void);

/**
 * 	Renvoy une structure cache et creer le path si necesaire
 */
FOUNDATION_EXPORT FscacheCache* _Nullable FscacheNewCache(NSString* _Nullable name);

/**
 * 	Renvoy une structure cache et stock son nom pour
	pouvoir la retrouver lors d'un clean all.

	en RemoveExpired est envoyer en background
 */
FOUNDATION_EXPORT FscacheCache* _Nullable FscacheRegistreNewCache(NSString* _Nullable name);

#endif
