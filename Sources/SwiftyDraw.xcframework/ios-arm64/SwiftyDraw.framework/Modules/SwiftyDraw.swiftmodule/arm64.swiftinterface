// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SwiftyDraw
import Swift
@_exported import SwiftyDraw
import UIKit
public class Brush : Swift.Codable {
  public var color: SwiftyDraw.Color
  public var originalWidth: CoreGraphics.CGFloat {
    get
  }
  public var width: CoreGraphics.CGFloat
  public var opacity: CoreGraphics.CGFloat
  public var adjustedWidthFactor: CoreGraphics.CGFloat
  public var blendMode: SwiftyDraw.BlendMode
  public init(color: UIKit.UIColor = .black, width: CoreGraphics.CGFloat = 3, opacity: CoreGraphics.CGFloat = 1, adjustedWidthFactor: CoreGraphics.CGFloat = 1, blendMode: SwiftyDraw.BlendMode = .normal)
  public func adjustWidth(for touch: UIKit.UITouch)
  public static var `default`: SwiftyDraw.Brush {
    get
  }
  public static var thin: SwiftyDraw.Brush {
    get
  }
  public static var medium: SwiftyDraw.Brush {
    get
  }
  public static var thick: SwiftyDraw.Brush {
    get
  }
  public static var marker: SwiftyDraw.Brush {
    get
  }
  public static var eraser: SwiftyDraw.Brush {
    get
  }
  public static var selection: SwiftyDraw.Brush {
    get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension Brush : Swift.Equatable, Swift.Comparable, Swift.CustomStringConvertible {
  public static func == (lhs: SwiftyDraw.Brush, rhs: SwiftyDraw.Brush) -> Swift.Bool
  public static func < (lhs: SwiftyDraw.Brush, rhs: SwiftyDraw.Brush) -> Swift.Bool
  public var description: Swift.String {
    get
  }
}
public struct Color : Swift.Codable {
  public var uiColor: UIKit.UIColor {
    get
  }
  public init(_ uiColor: UIKit.UIColor)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum BlendMode : Swift.String, Swift.Codable {
  case normal
  case clear
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol SwiftyDrawViewDelegate {
  @objc func swiftyDraw(shouldBeginDrawingIn drawingView: SwiftyDraw.SwiftyDrawView, using touch: UIKit.UITouch) -> Swift.Bool
  @objc func swiftyDraw(didBeginDrawingIn drawingView: SwiftyDraw.SwiftyDrawView, using touch: UIKit.UITouch)
  @objc func swiftyDraw(isDrawingIn drawingView: SwiftyDraw.SwiftyDrawView, using touch: UIKit.UITouch)
  @objc func swiftyDraw(didFinishDrawingIn drawingView: SwiftyDraw.SwiftyDrawView, using touch: UIKit.UITouch)
  @objc func swiftyDraw(didCancelDrawingIn drawingView: SwiftyDraw.SwiftyDrawView, using touch: UIKit.UITouch)
}
@objc @_inheritsConvenienceInitializers open class SwiftyDrawView : UIKit.UIView {
  public var brush: SwiftyDraw.Brush {
    get
    set
  }
  public var isEnabled: Swift.Bool
  public enum DrawMode {
    case draw, line, ellipse, rect
    public static func == (a: SwiftyDraw.SwiftyDrawView.DrawMode, b: SwiftyDraw.SwiftyDrawView.DrawMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var drawMode: SwiftyDraw.SwiftyDrawView.DrawMode
  public var shouldFillPath: Swift.Bool
  public var isPencilInteractive: Swift.Bool {
    get
    set
  }
  @objc @IBOutlet weak public var delegate: SwiftyDraw.SwiftyDrawViewDelegate?
  @available(iOS 9.1, *)
  public enum TouchType : Swift.Equatable, Swift.CaseIterable {
    case finger, pencil
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SwiftyDraw.SwiftyDrawView.TouchType, b: SwiftyDraw.SwiftyDrawView.TouchType) -> Swift.Bool
    public typealias AllCases = [SwiftyDraw.SwiftyDrawView.TouchType]
    public static var allCases: [SwiftyDraw.SwiftyDrawView.TouchType] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(iOS 9.1, *)
  public var allowedTouchTypes: [SwiftyDraw.SwiftyDrawView.TouchType] {
    get
    set
  }
  public var drawItems: [SwiftyDraw.SwiftyDrawView.DrawItem]
  public var drawingHistory: [SwiftyDraw.SwiftyDrawView.DrawItem]
  public var firstPoint: CoreGraphics.CGPoint
  public var currentPoint: CoreGraphics.CGPoint
  public enum ShapeType {
    case rectangle, roundedRectangle, ellipse
    public static func == (a: SwiftyDraw.SwiftyDrawView.ShapeType, b: SwiftyDraw.SwiftyDrawView.ShapeType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct DrawItem {
    public var path: CoreGraphics.CGMutablePath
    public var brush: SwiftyDraw.Brush
    public var isFillPath: Swift.Bool
    public init(path: CoreGraphics.CGMutablePath, brush: SwiftyDraw.Brush, isFillPath: Swift.Bool)
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  public func display(drawItems: [SwiftyDraw.SwiftyDrawView.DrawItem])
  public var canUndo: Swift.Bool {
    get
  }
  public var canRedo: Swift.Bool {
    get
  }
  public func undo()
  public func redo()
  public func clear()
  @objc deinit
}
@available(iOS 12.1, *)
extension SwiftyDrawView : UIKit.UIPencilInteractionDelegate {
  @objc dynamic public func pencilInteractionDidTap(_ interaction: UIKit.UIPencilInteraction)
}
extension SwiftyDrawView.DrawItem : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension SwiftyDraw.BlendMode : Swift.Equatable {}
extension SwiftyDraw.BlendMode : Swift.Hashable {}
extension SwiftyDraw.BlendMode : Swift.RawRepresentable {}
extension SwiftyDraw.SwiftyDrawView.DrawMode : Swift.Equatable {}
extension SwiftyDraw.SwiftyDrawView.DrawMode : Swift.Hashable {}
@available(iOS 9.1, *)
extension SwiftyDraw.SwiftyDrawView.TouchType : Swift.Hashable {}
extension SwiftyDraw.SwiftyDrawView.ShapeType : Swift.Equatable {}
extension SwiftyDraw.SwiftyDrawView.ShapeType : Swift.Hashable {}
